require 'spec_helper'

# When nil, klass and child_klass are (re-)generated by let().
def ensure_examples_independence
  SimpleTokenAuthentication.send(:remove_const, :SomeClass)
  SimpleTokenAuthentication.send(:remove_const, :SomeChildClass)
end

describe 'A token authentication handler class (or one of its children)' do

  after(:each) do
    ensure_examples_independence
  end

  let(:klass) do
    class SimpleTokenAuthentication::SomeClass; end
    SimpleTokenAuthentication::SomeClass.send :include, SimpleTokenAuthentication::ActsAsTokenAuthenticationHandler
    SimpleTokenAuthentication::SomeClass
  end

  let(:child_klass) do
    class SimpleTokenAuthentication::SomeChildClass < klass; end
    SimpleTokenAuthentication::SomeChildClass
  end

  let(:subjects) do
    # all specs must apply to classes which include the module and their children
    [klass, child_klass]
  end

  it 'responds to :acts_as_token_authentication_handler_for', public: true do
    subjects.each do |subject|
      expect(subject).to respond_to :acts_as_token_authentication_handler_for
    end
  end

  it 'responds to :acts_as_token_authentication_handler', public: true, deprecated: true do
    subjects.each do |subject|
      expect(subject).to respond_to :acts_as_token_authentication_handler
    end
  end

  describe 'which support the :before_filter hook' do

    let(:subjects) do
      # all specs must apply to classes which include the module and their children
      [klass, child_klass]
    end

    before(:each) do
      subjects.each do |subject|
        subject.stub(:before_filter)
      end
    end

    # User

    context 'and which acts as token authentication handler for User' do

      before(:each) do
        # skip the code intended to be run in the Rails test environment
        rails = double()
        stub_const('Rails', rails)
        rails.stub_chain(:env, :test?).and_return(false)

        @user = double()
        stub_const('User', @user)
        @user.stub(:name).and_return('User')
      end

      it 'ensures its instances require user to authenticate from token or any Devise strategy before any action', public: true do
        subjects.each do |subject|
          expect(subject).to receive(:before_filter).with(:authenticate_user_from_token!, {})
          subject.acts_as_token_authentication_handler_for @user
        end
      end

      context 'and disables the fallback to Devise authentication' do

        let(:options) do
          { fallback_to_devise: false }
        end

        it 'ensures its instances require user to authenticate from token before any action', public: true do
          subjects.each do |subject|
            expect(subject).to receive(:before_filter).with(:authenticate_user_from_token, {})
            subject.acts_as_token_authentication_handler_for @user, options
          end
        end
      end

      describe 'instance' do

        let!(:klass) do
          # skip the code intended to be run in the Rails test environment
          rails = double()
          stub_const('Rails', rails)
          rails.stub_chain(:env, :test?).and_return(false)

          @user = double()
          stub_const('User', @user)
          @user.stub(:name).and_return('User')

          class SimpleTokenAuthentication::SomeClass; end
          SimpleTokenAuthentication::SomeClass.send :include, SimpleTokenAuthentication::ActsAsTokenAuthenticationHandler
          SimpleTokenAuthentication::SomeClass.stub(:before_filter)
          SimpleTokenAuthentication::SomeClass.class_eval do
            acts_as_token_authentication_handler_for User
          end
          SimpleTokenAuthentication::SomeClass
        end

        let(:subjects) { [klass.new, child_klass.new] }

        it 'responds to :authenticate_user_from_token', protected: true do
          subjects.each do |subject|
            expect(subject).to respond_to :authenticate_user_from_token
          end
        end

        it 'responds to :authenticate_user_from_token!', protected: true do
          subjects.each do |subject|
            expect(subject).to respond_to :authenticate_user_from_token!
          end
        end

        it 'does not respond to :authenticate_super_admin_from_token', protected: true do
          subjects.each do |subject|
            expect(subject).not_to respond_to :authenticate_super_admin_from_token
          end
        end

        it 'does not respond to :authenticate_super_admin_from_token!', protected: true do
          subjects.each do |subject|
            expect(subject).not_to respond_to :authenticate_super_admin_from_token!
          end
        end
      end
    end

    # SuperAdmin

    context 'and which acts as token authentication handler for SuperAdmin' do

      before(:each) do
        # skip the code intended to be run in the Rails test environment
        rails = double()
        stub_const('Rails', rails)
        rails.stub_chain(:env, :test?).and_return(false)

        @super_admin = double()
        stub_const('SuperAdmin', @super_admin)
        @super_admin.stub(:name).and_return('SuperAdmin')
      end

      it 'ensures its instances require super_admin to authenticate from token or any Devise strategy before any action', public: true do
        subjects.each do |subject|
          expect(subject).to receive(:before_filter).with(:authenticate_super_admin_from_token!, {})
          subject.acts_as_token_authentication_handler_for @super_admin
        end
      end

      context 'and disables the fallback to Devise authentication' do

        let(:options) do
          { fallback_to_devise: false }
        end

        it 'ensures its instances require super_admin to authenticate from token before any action', public: true do
          subjects.each do |subject|
            expect(subject).to receive(:before_filter).with(:authenticate_super_admin_from_token, {})
            subject.acts_as_token_authentication_handler_for @super_admin, options
          end
        end
      end

      describe 'instance' do

        # ! to ensure it gets defined before subjects
        let!(:klass) do
          # skip the code intended to be run in the Rails test environment
          rails = double()
          stub_const('Rails', rails)
          rails.stub_chain(:env, :test?).and_return(false)

          @user = double()
          stub_const('SuperAdmin', @user)
          @user.stub(:name).and_return('SuperAdmin')

          class SimpleTokenAuthentication::SomeClass; end
          SimpleTokenAuthentication::SomeClass.send :include, SimpleTokenAuthentication::ActsAsTokenAuthenticationHandler
          SimpleTokenAuthentication::SomeClass.stub(:before_filter)
          SimpleTokenAuthentication::SomeClass.class_eval do
            acts_as_token_authentication_handler_for SuperAdmin
          end
          SimpleTokenAuthentication::SomeClass
        end

        let(:subjects) { [klass.new, child_klass.new] }

        it 'responds to :authenticate_super_admin_from_token', protected: true do
          subjects.each do |subject|
            expect(subject).to respond_to :authenticate_super_admin_from_token
          end
        end

        it 'responds to :authenticate_super_admin_from_token!', protected: true do
          subjects.each do |subject|
            expect(subject).to respond_to :authenticate_super_admin_from_token!
          end
        end

        it 'do not respond to :authenticate_user_from_token', protected: true do
          subjects.each do |subject|
            expect(subject).not_to respond_to :authenticate_user_from_token
          end
        end

        it 'do not respond to :authenticate_user_from_token!', protected: true do
          subjects.each do |subject|
            expect(subject).not_to respond_to :authenticate_user_from_token!
          end
        end
      end
    end
  end
end
